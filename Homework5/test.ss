(newline)
(display '(expr-compare 12 12))
(display #\space)
(display (expr-compare 12 12))

(newline)
(display '(expr-compare 12 20))
(display #\space)
(display (expr-compare 12 20))

(newline)
(display '(expr-compare #t #t))
(display #\space)
(display (expr-compare #t #t))

(newline)
(display '(expr-compare #f #f))
(display #\space)
(display (expr-compare #f #f))

(newline)
(display '(expr-compare #t #f))
(display #\space)
(display (expr-compare #t #f))

(newline)
(display '(expr-compare #f #t))
(display #\space)
(display (expr-compare #f #t))

(newline)
(display '(expr-compare 'a '(cons a b)))
(display #\space)
(display (expr-compare 'a '(cons a b)))

(newline)
(display '(expr-compare '(cons a b) '(cons a b)))
(display #\space)
(display (expr-compare '(cons a b) '(cons a b)))

(newline)
(display '(expr-compare '(cons a b) '(cons a c)))
(display #\space)
(display (expr-compare '(cons a b) '(cons a c)))

(newline)
(display '(expr-compare '(cons (cons a b) (cons b c))
              '(cons (cons a c) (cons a c))))
(display #\space)
(display (expr-compare '(cons (cons a b) (cons b c))
              '(cons (cons a c) (cons a c))))

(newline)
(display '(expr-compare '(cons a b) '(list a b)))
(display #\space)
(display (expr-compare '(cons a b) '(list a b)))

(newline)
(display '(expr-compare '(list) '(list a))  ⇒  (if % (list) (list a)))
(display #\space)
(display (expr-compare '(list) '(list a))  ⇒  (if % (list) (list a)))

; (expr-compare ''(a b) ''(a c))  ⇒  (if % '(a b) '(a c))
; (expr-compare '(quote (a b)) '(quote (a c)))  ⇒  (if % '(a b) '(a c))
; (expr-compare '(quoth (a b)) '(quoth (a c)))  ⇒  (quoth (a (if % b c)))
; (expr-compare '(if x y z) '(if x z z))  ⇒  (if x (if % y z) z)
; (expr-compare '(if x y z) '(g x y z))
;   ⇒ (if % (if x y z) (g x y z))
; (expr-compare '((lambda (a) (f a)) 1) '((lambda (a) (g a)) 2))
;   ⇒ ((lambda (a) ((if % f g) a)) (if % 1 2))
; (expr-compare '((lambda (a) (f a)) 1) '((λ (a) (g a)) 2))
;   ⇒ ((λ (a) ((if % f g) a)) (if % 1 2))
; (expr-compare '((lambda (a) a) c) '((lambda (b) b) d))
;   ⇒ ((lambda (a!b) a!b) (if % c d))
; (expr-compare ''((λ (a) a) c) ''((lambda (b) b) d))
;   ⇒ (if % '((λ (a) a) c) '((lambda (b) b) d))
; (expr-compare '(+ #f ((λ (a b) (f a b)) 1 2))
;               '(+ #t ((lambda (a c) (f a c)) 1 2)))
;   ⇒ (+
;      (not %)
;      ((λ (a b!c) (f a b!c)) 1 2))
; (expr-compare '((λ (a b) (f a b)) 1 2)
;               '((λ (a b) (f b a)) 1 2))
;   ⇒ ((λ (a b) (f (if % a b) (if % b a))) 1 2)
; (expr-compare '((λ (a b) (f a b)) 1 2)
;               '((λ (a c) (f c a)) 1 2))
;   ⇒ ((λ (a b!c) (f (if % a b!c) (if % b!c a)))
;      1 2)
; (expr-compare '((lambda (a) (eq? a ((λ (a b) ((λ (a b) (a b)) b a))
;                                     a (lambda (a) a))))
;                 (lambda (b a) (b a)))
;               '((λ (a) (eqv? a ((lambda (b a) ((lambda (a b) (a b)) b a))
;                                 a (λ (b) a))))
;                 (lambda (a b) (a b))))
;   ⇒ ((λ (a)
;       ((if % eq? eqv?)
;        a
;        ((λ (a!b b!a) ((λ (a b) (a b)) (if % b!a a!b) (if % a!b b!a)))
;         a (λ (a!b) (if % a!b a)))))
;      (lambda (b!a a!b) (b!a a!b)))